type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    4
    16
    36
    64
    100
    144
    196
    256
    324
    400
  learner_created: false
- name: main.py
  visible: true
  placeholders:
  - offset: 91
    length: 0
    placeholder_text: '[i ** 2 for i in iterator_numbers if i % 2 == 0]  # TODO заменить
      на map и filter'
    initial_state:
      length: 69
      offset: 91
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: 'map(lambda x: x ** 2, filter(lambda x: x % 2 == 0,
      iterator_numbers))'
  - offset: 91
    length: 0
    placeholder_text: 'num in numbers:  # TODO напечатать первые 10 чисел'
    initial_state:
      length: 15
      offset: 170
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '_ in range(10):'
  - offset: 93
    length: 20
    placeholder_text: 'num)  # TODO с помощью next получать следующий элемент от итератора'
    initial_state:
      length: 20
      offset: 194
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: next(numbers))
  text: |
    from itertools import count


    def task():
        iterator_numbers = count(1, 1)
        numbers = [i ** 2 for i in iterator_numbers if i % 2 == 0]  # TODO заменить на map и filter

        for num in numbers:  # TODO напечатать первые 10 чисел
            print(num)  # TODO с помощью next получать следующий элемент от итератора


    if __name__ == "__main__":
        task()
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 27 Apr 2022 15:05:25 UTC
record: -1
